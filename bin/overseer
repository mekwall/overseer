#!/usr/bin/env node

// windows: running "overseer blah" in this folder will invoke WSH, not node.
if (typeof WScript !== "undefined") {
    WScript.echo("overseer does not work when run\n"
                +"with the Windows Scripting Host\n\n"
                +"'cd' to a different directory,\n"
                +"or type 'overseer.cmd <args>',\n"
                +"or type 'node overseer <args>'.");
    WScript.quit(1);
    return
}

process.title = "overseer";

// Module deps
const exec = require('child_process').exec;
const program = require('commander');
const pkg = require('../package.json');
const version = pkg.version;
const os = require('os');
const fs = require('fs');
const path = require('path');
const overseer = require('../src/overseer');

// CLI
program
    .version(version)
    .usage('[options] <file>')
    .option('-w, --watch', 'watch for file system changes')
    .option('-f, --forks <n>', 'amount of workers to fork')
    .option('-P, --port <port>', 'port to listen to')
    .option('-H, --hostname <hostname>', 'hostname to listen to')
    .option('-E, --env <environment>', 'set environment')
    .option('--pidfile <file>', 'pidfile to use')
    .on('--help', function(){
        console.log('  Examples:');
        console.log('');
        console.log('    $ overseer -w -P 61337 -H localhost -f 4 app.js');
        console.log('');
    })
    .parse(process.argv);

const ENV = program.env || (process.env["NODE_ENV"] || "development");
const PORT = program.port || (process.env["PORT"] || 3000);
const HOST = program.hostname || (process.env["HOSTNAME"] || "0.0.0.0");

// Path
var appFile = program.args.shift();

if (!appFile) {
    console.error("Error: Missing file argument. -h for help");
    process.exit(0);
}

appFile = path.resolve(appFile);
if (!fs.existsSync(appFile)) {
    console.error("Error: %s could not be found.", appFile);
    process.exit(0);
}

console.log(appfile);